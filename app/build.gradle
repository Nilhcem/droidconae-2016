buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.4'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'
apply from: rootProject.file('gradle/sonarqube.gradle')

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId 'com.nilhcem.droidcontn'
        versionCode 1
        versionName '1.0'

        minSdkVersion 15
        targetSdkVersion 23
        resConfigs 'en'

        buildConfigField 'String', 'GIT_SHA', "\"${gitSha}\""
        buildConfigField 'String', 'API_ENDPOINT', "\"https://raw.githubusercontent.com/Nilhcem/droidcontn-2016/master/assets/api/\""
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        internal {
            applicationIdSuffix '.internal'

            buildConfigField 'boolean', 'INTERNAL_BUILD', "true"
            buildConfigField 'String', 'MOCK_ENDPOINT', "\"http://" + getLocalIp() + ":8990/\""
        }
        production {
            buildConfigField 'boolean', 'INTERNAL_BUILD', "false"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

ext.daggerVersion = '2.0.2'
ext.icepickVersion = '3.1.0'
ext.okhttpVersion = '3.0.0'
ext.retrofitVersion = '2.0.0-beta3'
ext.stethoVersion = '1.2.0'
ext.supportVersion = '23.1.1'

dependencies {
    compile "com.android.support:support-v4:$supportVersion"
    compile "com.android.support:support-annotations:$supportVersion"
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:preference-v14:$supportVersion"
    compile "com.android.support:design:$supportVersion"

    compile 'org.projectlombok:lombok:1.16.6'

    compile "com.google.dagger:dagger:$daggerVersion"
    apt "com.google.dagger:dagger-compiler:$daggerVersion"

    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.1'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"

    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'

    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.timber:timber:4.1.0'
    compile 'com.squareup.moshi:moshi:1.0.0'

    compile "frankiesardo:icepick:$icepickVersion"
    provided "frankiesardo:icepick-processor:$icepickVersion"

    internalCompile 'jp.wasabeef:takt:1.0.2'
    internalCompile 'com.jakewharton:process-phoenix:1.0.2'
    internalCompile "com.facebook.stetho:stetho:$stethoVersion"
    internalCompile("com.facebook.stetho:stetho-timber:$stethoVersion") {
        exclude group: 'com.jakewharton.timber'
    }

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.28'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.robolectric:robolectric:3.0'
}

// print build finish time
gradle.buildFinished { buildResult ->
    def buildFinishDate = new Date()
    def formattedDate = buildFinishDate.format('yyyy-MM-dd HH:mm:ss')
    println "Build finished: ${formattedDate}"
}

// get current computer's ip
// this method was simplified for example sake, but only works on 192.*.*.* ips. Need to be generic.
def getLocalIp() {
    for (NetworkInterface iface : NetworkInterface.networkInterfaces) {
        for (InetAddress addr : iface.inetAddresses) {
            if (!addr.isLoopbackAddress()) {
                def ip = addr.hostAddress
                if (ip.startsWith('192.')) {
                    return ip
                }
            }
        }
    }
}
